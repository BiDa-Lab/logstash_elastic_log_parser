input {
	beats {
		port => 5044
		add_field => {
			"original_message" => "%{message}"
		}
	}
}
filter {
	mutate {
		remove_field => [
			"beat","offset"
		]
	}
	grok {
		match => [ 
			"message", "\[%{TIMESTAMP_ISO8601:log_time}\]%{SPACE}\[%{DATA:severity}%{SPACE}\]%{SPACE}\[%{DATA:action}%{SPACE}\]%{SPACE}\[%{DATA:node}\]%{SPACE}(?<message>(.|\r|\n)*)", 
			"message", "\[%{TIMESTAMP_ISO8601:log_time}\]%{SPACE}\[%{DATA:severity}%{SPACE}\]%{SPACE}\[%{DATA:action}%{SPACE}\]%{SPACE}(?<message>(.|\r|\n)*)" 
		]
		overwrite => [ "message" ]
	}
	grok {
		match => [ 
			"message", "(^)\[%{DATA:index}\]%{SPACE}(?<message>(.|\r|\n)*)", 
			"message", "(?<message>(.|\r|\n)*)"
		]
		overwrite => [ "message" ]
	}
	date {
		match => [ "log_time" , "yyyy-MM-dd' 'HH:mm:ss,SSS" , "yyyy-MM-dd'T'HH:mm:ss,SSS"]
		locale => "en"
		timezone => "Asia/Jerusalem"
		target => "log_time"
	}
	if "_grokparsefailure" not in [tags] {
			if [severity] == "DEBUG" and [action] == "action.bulk" {
				grok {
					match => [ 
						"message", "index \{\[%{DATA:source_index}\]\[%{DATA:source_type}\]\[%{DATA:source_id}\], source\[%{DATA:source_document}\]\}(\r|\n)(?<message>(.|\r|\n)*)"
					]
					tag_on_failure => ["grok1"]
					overwrite => [ "message" ]
				}
				grok {
					match => [
						"message", "(\n|^)%{DATA:exception}(\r\n\t|\r\n|\n\t)at%{SPACE}"
					]
					tag_on_failure => []
				}
				grok {
					match => [
						"message", "Caused%{SPACE}by:%{SPACE}%{DATA:cause_by}(\r\n\t|\r\n|\n\t)at%{SPACE}"
					]
					tag_on_failure => []
				}
			} 
			else {
				grok {
					match => [
						"message", "(\r\n\t|\r\n|\n)%{DATA:exception}(\r\n\t|\r\n|\n\t)at%{SPACE}"
					]
					tag_on_failure => []
				}
				grok {
					match => [
						"message", "Caused%{SPACE}by:%{SPACE}%{DATA:cause_by}(\r\n\t|\r\n|\n\t)at%{SPACE}"
					]
					tag_on_failure => []
				}
			}
			if [exception] {
				grok {
					match => [
						"exception", "\]%{SPACE}Shard%{DATA:exception_type}Exception",
						"exception", "\]%{SPACE}Illegal%{DATA:exception_type}Exception",
						"exception", "\]%{SPACE}Invalid%{DATA:exception_type}Exception",
						"exception", "\]%{SPACE}Elastic%{DATA:exception_type}Exception",
						"exception", "%{DATA:exception_type}Exception"
					] 
					tag_on_failure => ["grok6"]
				}
				if[exception_type] == "IndexName"{
					mutate {
						replace => { "exception_type" => "InvalidIndexNameException"}
						remove_field => "message"
					}
				}
				else if[exception_type] == "IndexShardState"{
					mutate {
						replace => { "exception_type" => "IllegalIndexShardStateException"}
						remove_field => "message"
					}
				}
				else if[exception_type] == "Search"{
					mutate {
						replace => { "exception_type" => "ElasticsearchException"}
						remove_field => "message"
					}
				}
				else if[exception_type] == "NotFound"{
					mutate {
						replace => { "exception_type" => "ShardNotFoundException"}
						remove_field => "message"
					}
				}
				else {
					mutate {
						replace => { "exception_type" => "%{exception_type}Exception"}
						remove_field => "message"
					}
				}
			}
		}
	}
}
output {
	elasticsearch {
		hosts => ["IP_OR_HOSTNAME"]
		index => "%{[fields][cluster]}-%{+YYYY-MM}"
	}
}
